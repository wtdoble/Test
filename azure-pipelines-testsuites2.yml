# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

variables:
  RULE: ""
  AMW_QUERY_ENDPOINT: ""

steps:
# - task: Go@0
#   displayName: "go test"
#   inputs:
#     command: 'custom' # 'get' | 'build' | 'test' | 'custom'. Required. Command. Default: get.
#     #customCommand: # string. Required when command == custom. Custom command. 
#     #arguments: # string. Arguments. 
#   # Advanced
#     workingDirectory: '.\ginkgo-e2e\wtdTest'  # string. Working directory.

- task: Go@0
  displayName: "go install ginkgo"
  inputs:
    command: 'install' # 'get' | 'build' | 'test' | 'custom'. Required. Command. Default: get.
    #customCommand: # string. Required when command == custom. Custom command. 
    arguments: github.com/onsi/ginkgo/v2/ginkgo@latest # string. Arguments. 
  # Advanced
    ##workingDirectory: '.\ginkgo-e2e\wtdTest'  # string. Working directory.

##go get github.com/onsi/gomega

- task: AzureCLI@2
  displayName: Aks Get-Credentials
  inputs:
    azureSubscription: $(AZURESUBSCRIPTION)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: az aks get-credentials --resource-group ${env:RESOURCE-GROUP} --name ${env:CLUSTER-NAME}

- task: AzureCLI@2
  displayName: "Initialize variables"
  inputs:
    azureSubscription: $(AZURESUBSCRIPTION)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      az extension add --name alertsmanagement --allow-preview true                                                                    
      az alerts-management prometheus-rule-group list -g ${env:RESOURCE-GROUP}

      $o = az alerts-management prometheus-rule-group list -g ${env:RESOURCE-GROUP}                                                                
      $s = [string]::Join("", $o)                                                                                                      
      $s                                                                                                                               
      $j = convertfrom-json -InputObject $s  
      $rule = $j[0].rules[0].record
      $rule
      $(RULE) = $rule

      echo "##vso[task.setvariable variable=varRULE]$($rule)"
      [Environment]::SetEnvironmentVariable("envRULE", $rule)

      $o = az resource show --resource-type "microsoft.monitor/accounts" -g ${env:RESOURCE-GROUP}  -n wtdaks9-amw
      $s = [string]::Join("", $o)                                                                                                      
      $s                                                                                                                               
      $j = convertfrom-json -InputObject $s
      $j.properties.metrics.prometheusQueryEndpoint
      ##[Environment]::SetEnvironmentVariable("AMW_QUERY_ENDPOINT", $j.properties.metrics.prometheusQueryEndpoint)
      $(AMW_QUERY_ENDPOINT) = $j.properties.metrics.prometheusQueryEndpoint
      
    workingDirectory: '.\ginkgo-e2e\wtdTest'

- task: AzureCLI@2
  displayName: "Run RegionsTest test suite"
  inputs:
    azureSubscription: $(AZURESUBSCRIPTION)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      # Run Ginkgo
      $cmd = "$([Environment]::GetEnvironmentVariable('userprofile'))\go\bin\ginkgo.exe -- -myArg=$(RULE)"
      $cmd    
      [Environment]::SetEnvironmentVariable("AMW_QUERY_ENDPOINT", $(AMW_QUERY_ENDPOINT))                                                                                                                         
      Invoke-Expression -Command $cmd 
      
    workingDirectory: '.\ginkgo-e2e\wtdTest'

- task: AzureCLI@2
  displayName: "Run QueryMetrics test suite"
  inputs:
    azureSubscription: $(AZURESUBSCRIPTION)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      # Run Ginkgo
      $cmd = "$([Environment]::GetEnvironmentVariable('userprofile'))\go\bin\ginkgo.exe"
      $cmd                                                                                                                             
      [Environment]::SetEnvironmentVariable("AMW_QUERY_ENDPOINT", $(AMW_QUERY_ENDPOINT))                                                                                                                         
      Invoke-Expression -Command $cmd 
      
    workingDirectory: '.\ginkgo-e2e\querymetrics'

# - script: |
#     echo GOPATH
#     echo %gopath%
#     echo
#     echo PATH
#     echo %path%
#     echo
#     echo USERPROFILE
#     echo %USERPROFILE%
#     echo
#     cd .\ginkgo-e2e\wtdTest
#     pwd
#     REM dir %userprofile%\
#     REM dir %userprofile%\go
#     REM dir %userprofile%\go\bin\
#     echo MYVAR
#     echo $(myVar)
#     echo ENV MYVAR
#     echo %MYVAR%
#     echo RUN GINKGO
#     echo "%userprofile%\go\bin\ginkgo.exe -- -myArg=%MYVAR%"
#     %userprofile%\go\bin\ginkgo.exe -- -myArg="instance:node_num_cpu:sum"
#   displayName: 'Run RegionsTest test suite'
          
