
trigger:
- none

# resources:
#   pipelines:
#     - pipeline: cicdPipeline  # Name of the pipeline resource
#       source: 'Demo ci-cd-cluster'  # Project, repository, and pipeline name
#       trigger: true  # Automatically trigger the pipeline
#     - pipeline: regionTestsSuitePipeline  # Name of the pipeline resource
#       source: 'Demo Region Tests'  # Project, repository, and pipeline name
#       trigger: true  # Automatically trigger the pipeline

pool:
  vmImage: 'windows-latest'

  jobs:
    - job: Deploy
      steps:
        - script: echo "Deploying the AKS cluster"
          displayName: 'Run AKS deployment script'
          continueOnError: false
        - task: AzureCLI@2
          inputs:
            azureSubscription: ContainerInsights_Dev_Grace
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            failOnStderr: true
            inlineScript: |
              Write-host "Finding the cluster deployment pipeline..."
              $str = az pipelines build definition show --organization https://dev.azure.com/widoble0322/ --project TestPipeline --name "wtdoble.Test"
              $str2 = [string]::Join("", $str) 
              $j = ConvertFrom-Json -InputObject $str2 

              echo "Deploying AKS cluster"
              do {
                Write-host "Getting "
                $r = az pipelines runs list --organization https://dev.azure.com/widoble0322/ --project TestPipeline --pipeline-ids $j.id
                $r2 = [string]::Join("", $r) 
                $j2 = ConvertFrom-Json -InputObject $r2
                $j2Latest= $j2[0]

                $j2latest.status
                $j2latest.result
                if ([string]::Compare($j2Latest.status, "completed", $true) -ne 0) 
                { 
                    Write-host "The pipeline is not finished. Waiting..."
                    Sleep -Seconds 60
                }
              } while ([string]::Compare($j2Latest.status, "completed", $true) -ne 0)

              if (($j2Latest -eq $null) -or ([string]::Compare($j2latest.result, "failed", $true) -eq 0)) {
                Write-Error "Deploying the AKS cluster failed."
              }

    - job: Test
      dependsOn: Deploy
      steps:
        - script: echo "Test the deployment"
          displayName: 'Run test script'   
        - task: AzureCLI@2
          inputs:
            azureSubscription: ContainerInsights_Dev_Grace
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Invoking regionTests pipeline"
              ##az pipelines run --name cicdPipeline      
