# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: windows-latest

steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'

- task: AzureCLI@2
  displayName: Azure CLI
  inputs:
    azureSubscription:  ContainerInsights_Dev_Grace
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      function ValidateRequired {
        param (
        )

        throw
      }

      ##{\"clusterName\":{\"value\":\"demoAksCluster\"},
      ##\"actionGroupId\":{\"value\":\"/subscriptions/b9842c7c-1a38-4385-8f39-a51314758bcf/resourceGroups/wtd-test/providers/Microsoft.Insights/actiongroups/wtdTestAg\"}}

      $clusterName = ${env:CLUSTER_NAME}
      $actionGroupId = ${env:ACTION_GROUP_ID}
      $resourceGroup = ${env:RESOURCE-GROUP}
      $sub = ${env:AZURESUBSCRIPTION}

      $rg = (az group show -g ${env:RESOURCE-GROUP} | convertfrom-json)
      write-host "Resource group '$($rg.name)' location '$($rg.location)'."

      $p = ${env:PARAMETERS} 
      if ([string]::IsNullOrEmpty($p)) {
        $p = "{}"
      }
      "Default parameters: $p"
      $j = $p | convertfrom-json

      $parms = @(
        @{"name" = "clusterName";
          "value" = $clusterName},
        @{"name" = "actionGroupId";
          "value" = $actionGroupId},
        @{"name" = "azureMonitorWorkspaceLocation";
          "value" = $rg.location}
      )

      "Processing Parameters:"
      $parms | foreach {
          write-host "Name = $($_.name); Value = $($_.value)"

          if (![string]::IsNullOrEmpty($_.value.Trim())) {
            $n = [PSCustomObject]@{
              value = "$($_.value)"
            }

            "Updating parameter '$($_.name)'' to '$($_.value)'"
            $j | Add-Member -name $_.name -MemberType NoteProperty -value $n -Force          
          }
      }

      $j | fl

      ##$p2 = $p -replace "\\""", """"
      ##"Conforming input parameters: $p2"
      ##$j = $p2 | convertfrom-json

      # # $rg = (az group show -g ${env:RESOURCE-GROUP} | convertfrom-json)
      # # write-host "Resource group '$($rg.name)' location '$($rg.location)'."
      # # $nestedObject = [PSCustomObject]@{
      # #     value = "$($rg.location)"
      # # }

      # Does the property exist?
      # # if (($j.azureMonitorWorkspaceLocation -eq $null) -or ($j.azureMonitorWorkspaceLocation.value -eq $null)) {
      # #   write-host "'azureMonitorWorkspaceLocation.value' not provided..."

      # #   write-host "Using location '$($rg.location)' from '$($rg.name)"
      # #   write-host "Adding new 'azureMonitorWorkspaceLocation' property..."

      # #   $j | Add-Member -name "azureMonitorWorkspaceLocation" -MemberType NoteProperty -value $nestedObject -Force
      # #   $j | fl
      # # } elseif ([string]::IsNullOrEmpty($j.azureMonitorWorkspaceLocation.value)) {
      # #   write-host "'azureMonitorWorkspaceLocation.value' is provided, but it's empty."
      # #   write-host "Updating to '$($rg.location)'."
      # #   $j.azureMonitorWorkspaceLocation.value = $rg.location
      # # } else {
      # #    write-host "'azureMonitorWorkspaceLocation.value' provided: $($j.azureMonitorWorkspaceLocation.value)"
      # # }

      $parmFinal = ($j | convertto-json -Compress)
      $parmFinal = $parmFinal -replace """", "\"""
      "Final parameters: $parmFinal"

      az --version
      az account show
      az deployment group create `
          --resource-group ${env:RESOURCE-GROUP} `
          --name ClusterDeployment `
          --template-file ".\wip9-final.json" `
          --parameters $parmFinal  ##${env:PARAMETERS}   
      